{"version":3,"sources":["serviceWorker.js","View/sideNav.js","Constants.js","Components/Carousel.js","View/homePage.js","Components/Pagination.js","Components/ShowMovies.js","Selector.js","ActionCreator.js","View/MovieListPage.js","Components/ShowLikedMovie.js","View/LikedListPage.js","Components/ShowBlockedMovie.js","View/BlockedListPage.js","View/App.js","Store/reducer.js","index.js"],"names":["Boolean","window","location","hostname","match","navBar","onPageChange","className","onClick","bind","this","url","concat","Constants","imgurl","Caro","React","useState","index","setIndex","CaroItem","setCaroItem","useEffect","axios","get","then","res","Item","data","results","slice","map","mapItem","Carousel","key","id","src","poster_path","alt","activeIndex","onSelect","selectedIndex","e","homePage","Fragment","Pagination","prevPageHandeler","Page","props","alert","changePage","nextPageHandeler","check","resResults","addOnePageMovies","Component","ShowMovies","movieData","imgUrl","title","vote_count","vote_average","release_date","overview","loading","setLoading","counter","useRef","BlockedMovies","findIndex","finditem","style","display","onLoad","current","addOneLikedMovie","addOneBlockedMovie","state","LikedMovies","MovieSet","actions","type","Actions","pageNumber","onePageMovies","preURL","movieListPage","sort","pageNumer","findItem","setSort","setState","componentDidMount","resPage","page","movieList","a","b","Date","movie","connect","Selector","dispatch","deleteOneLikedMovie","deleteOneBlockedMovie","ShowLikedMovie","LikedListPage","likedMovies","ShowBlockedMovie","App","setPage","handleClick","useCallback","v","currentPage","BlockedListPage","initialState","reducer","newMovieData","finder","action","newLikedMovies","newBlockedMovies","newMovieSet","index1","push","index1_1","splice","index2","index2_1","index3","index4","newPage","newPageNumber","newOnePageMovies","newMovieSetObj","store","createStore","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.9942c4c9.chunk.js","sourcesContent":["// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' },\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import React from \"react\";\r\n\r\nexport default function navBar({ onPageChange }) {\r\n  return (\r\n    <div className=\"side-nav\">\r\n      <div className=\"link-container\">\r\n        <div className={\"link\"} onClick={onPageChange.bind(this, 0)}>\r\n          Home\r\n        </div>\r\n        <div className={\"link\"} onClick={onPageChange.bind(this, 1)}>\r\n          Movie List\r\n        </div>\r\n        <div className={\"link\"} onClick={onPageChange.bind(this, 2)}>\r\n          Movie List of Liked\r\n        </div>\r\n        <div className={\"link\"} onClick={onPageChange.bind(this, 3)}>\r\n          Movie List of Blocked\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n","//action type\r\nconst ADD_ONE_LIKED_MOVIE = \"ADD_ONE_LIKED_MOVIE\";\r\nconst ADD_ONE_BLOCKED_MOVIE = \"ADD_ONE_BLOCKED_MOVIE\";\r\nconst DELETE_ONE_LIKED_MOVIE = \"DELETE_ONE_LIKED_MOVIE\";\r\nconst DELETE_ONE_BLOCKED_MOVIE = \"DELETE_ONE_BLOCKED_MOVIE\";\r\n\r\nconst CHANGE_PAGE = \"CHANGE_PAGE\";\r\nconst ADD_ONE_PAGE_MOVIES = \"ADD_ONE_PAGE_MOVIES\";\r\n\r\n/*\r\n    put your action.type constants here, don't forget to add them into export\r\n*/\r\n\r\n//other constant\r\nconst API_KEY = \"9d3badb0c8d83a0bce6bf3cf96e3cc60\";\r\nconst PREURL = 'https://api.themoviedb.org/3/movie/popular?api_key=43d2c15376ca311ed501203d6c7cf47f&language=en-US&page=';\r\n\r\n/*\r\n    put your other constants here, don't forget to add them into export\r\n*/\r\n\r\nexport default {\r\n    ADD_ONE_LIKED_MOVIE,\r\n    ADD_ONE_BLOCKED_MOVIE,\r\n    DELETE_ONE_LIKED_MOVIE,\r\n    DELETE_ONE_BLOCKED_MOVIE,\r\n    CHANGE_PAGE,\r\n    ADD_ONE_PAGE_MOVIES,\r\n\r\n    API_KEY,\r\n    PREURL\r\n};","import React, { useEffect } from \"react\"\r\nimport axios from \"axios\"\r\nimport Carousel from 'react-bootstrap/Carousel'\r\nimport \"../Styles/Carousel.css\"\r\nimport Constants from '../Constants';\r\n\r\n// preURL => 'https://api.themoviedb.org/3/movie/popular?api_key=43d2c15376ca311ed501203d6c7cf47f&language=en-US&page='\r\nconst preURL = Constants.PREURL;\r\nconst url = ''.concat(preURL, 1);\r\nconst imgBaseUrl = 'https://image.tmdb.org/t/p/';\r\nconst imgSize = 'w500'\r\nconst imgurl =''.concat(imgBaseUrl,imgSize);\r\n\r\nconst Caro = () =>{\r\n    const [index, setIndex] = React.useState(0);\r\n    // const [planets,setPlanets]= React.useState([]);\r\n    const [CaroItem, setCaroItem] = React.useState([]);\r\n    const handleSelect = (selectedIndex, e) => {\r\n      setIndex(selectedIndex);};\r\n\r\n    const fetchData = () => {\r\n      axios.get(url)\r\n        .then(res => {\r\n          const Item = res.data.results.slice(15).map( mapItem => \r\n            <Carousel.Item key={mapItem.id}>\r\n              <img\r\n                className=\"slidePicture\"\r\n                src={''.concat(imgurl, mapItem.poster_path)}\r\n                alt=\"slide pic\"\r\n              />\r\n            </Carousel.Item>\r\n          );\r\n          setCaroItem(Item);\r\n        });\r\n    }\r\n\r\n    useEffect( () => {\r\n      fetchData();\r\n    }, [] );\r\n\r\n\r\n    return (\r\n      <Carousel activeIndex={index} onSelect={handleSelect}>\r\n        {CaroItem}\r\n      </Carousel>\r\n    );\r\n}\r\n\r\nexport default Caro;\r\n","import React from \"react\";\r\nimport Caro from \"../Components/Carousel\"\r\n\r\nexport default function homePage({ onPageChange }) {\r\n  return (\r\n    <React.Fragment>\r\n      <header>Our Top Rated Movie List</header>\r\n      <p>111123312321413123</p>\r\n      <p>111123312321413123</p>\r\n      <p>111123312321413123</p>\r\n      <Caro />\r\n    </React.Fragment>\r\n  );\r\n}\r\n","import React from 'react';\r\nimport Constants from '../Constants';\r\nimport axios from 'axios';\r\n\r\nclass Pagination extends React.Component {\r\n    prevPageHandeler = () => {\r\n        const Page = this.props.Page;\r\n        if(Page === 1)\r\n            alert(\"This is the first page\");\r\n        else \r\n            this.props.changePage(Page-1);\r\n    }\r\n        \r\n    nextPageHandeler = () => {\r\n        let Page = this.props.Page;\r\n        if(Page === 500)\r\n            alert(\"This is the last page\");\r\n        else {\r\n            Page++;\r\n            this.props.changePage(Page);\r\n            //if it is a new page, send request to server\r\n            if( !this.props.check(Page) ) {\r\n                const url = ''.concat(Constants.PREURL, Page);\r\n                axios.get(url)\r\n                .then( res => {\r\n                    // const resPage = res.data.page;\r\n                    const resResults = res.data.results;\r\n                    this.props.addOnePageMovies(Page, resResults);\r\n                });\r\n            }\r\n        }\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div className=\"paginationArea\">\r\n                <button onClick={this.prevPageHandeler}>Prev</button>\r\n                <p className=\"pageText\">{this.props.Page} / 500</p>\r\n                <button onClick={this.nextPageHandeler}>Next</button>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default Pagination;","import React, { useRef, useState } from 'react';\r\nimport \"../Styles/MovieListPage.css\";\r\n\r\nconst imgBaseUrl = 'https://image.tmdb.org/t/p/';\r\nconst imgSize = 'w300';\r\n\r\nconst ShowMovies = (props) => {\r\n    const movieData = props.movieData;\r\n    const imgUrl = ''.concat(imgBaseUrl, imgSize, movieData.poster_path);\r\n    const title = ''.concat(movieData.title);\r\n    const vote_count = ''.concat(movieData.vote_count);\r\n    const vote_average = ''.concat(movieData.vote_average);\r\n    const release_date = ''.concat(movieData.release_date);\r\n    const overview = ''.concat(movieData.overview);\r\n\r\n    const ifBlocked = () => {\r\n        const BlockedMovies = props.BlockedMovies;\r\n        const finder = (finditem) => {\r\n            return finditem.id === movieData.id;\r\n        }\r\n        return BlockedMovies.findIndex(finder) >= 0;\r\n    }\r\n\r\n    const handleLike = () => {\r\n        props.addOneLikedMovie(movieData);   \r\n    }\r\n\r\n    const handleBlock = () => {\r\n        props.addOneBlockedMovie(movieData);   \r\n    }\r\n    \r\n    //add loading\r\n    const [loading, setLoading] = useState(true);\r\n    const counter = useRef(0);\r\n    const imgLoaded = () => {\r\n        counter.current ++;\r\n        if(counter.current >= 1)\r\n            setLoading(false);\r\n    }\r\n\r\n\r\n    return !ifBlocked(movieData) && (\r\n        <div className=\"showSingleMovie\">\r\n            <img src='./img/loading.gif' alt=\"loading img\" style={{display : loading?\"inline\":\"none\"}}/>\r\n            <img src={imgUrl} alt={movieData.id} onLoad={imgLoaded} style={{display : loading?\"none\":\"inline\"}}/>\r\n            <div className=\"operator\">\r\n                <img src=\"./img/like_icon.png\" alt=\"like icon\" onClick={handleLike} />\r\n                <img src=\"./img/block_icon.png\" alt=\"block icon\" onClick={handleBlock} />\r\n            </div>\r\n            <div className=\"movieInfo\">\r\n                <p className=\"title\" title={title}>{title}</p>\r\n                <p className=\"release_date\" title={release_date} >Release Date: {release_date}</p>\r\n                <div className=\"count_ave\">\r\n                    <p className=\"vote_count\" title={vote_count} >Vote Count: {vote_count}</p>\r\n                    <p className=\"vote_average\" title={vote_average} >Vore Average: {vote_average}</p>\r\n                </div>\r\n                <p className=\"overview\" title={overview}>{overview}</p>\r\n            </div>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default ShowMovies;","const LikedMoviesSelector = (state) => state.LikedMovies;\r\nconst BlockedMoviesSelector = (state) => state.BlockedMovies;\r\nconst PageSelector = (state) => state.Page;\r\nconst MovieSetSelector = (state) => state.MovieSet;\r\n\r\n/*\r\n    put your selectors here, don't forget to add them into export\r\n*/\r\n\r\nexport default {\r\n    LikedMoviesSelector,\r\n    BlockedMoviesSelector,\r\n    PageSelector,\r\n    MovieSetSelector\r\n}","import Actions from './Constants';\r\n\r\nconst addOneLikedMovie = (movieData) => ({\r\n    type: Actions.ADD_ONE_LIKED_MOVIE,\r\n    movieData: movieData\r\n});\r\n\r\nconst addOneBlockedMovie = (movieData) => ({\r\n    type: Actions.ADD_ONE_BLOCKED_MOVIE,\r\n    movieData: movieData\r\n});\r\n\r\nconst deleteOneLikedMovie = (movieData) => ({\r\n    type: Actions.DELETE_ONE_LIKED_MOVIE,\r\n    movieData: movieData\r\n});\r\n\r\nconst deleteOneBlockedMovie = (movieData) => ({\r\n    type: Actions.DELETE_ONE_BLOCKED_MOVIE,\r\n    movieData: movieData\r\n});\r\n\r\nconst changePage = (Page) => ({\r\n    type: Actions.CHANGE_PAGE,\r\n    Page: Page    \r\n});\r\n\r\n//add 20 movies into redux\r\nconst addOnePageMovies = (pageNumber, onePageMovies) => ({\r\n    type: Actions.ADD_ONE_PAGE_MOVIES,\r\n    pageNumber: pageNumber,\r\n    onePageMovies: onePageMovies\r\n});\r\n\r\n/*\r\n    put your action creators here, don't forget to add them into export\r\n*/\r\n\r\nexport const actions = {\r\n    addOneLikedMovie, \r\n    addOneBlockedMovie,\r\n    deleteOneLikedMovie,\r\n    deleteOneBlockedMovie,\r\n    changePage,\r\n    addOnePageMovies\r\n};","import React, { Fragment } from 'react';\r\nimport { connect } from 'react-redux';\r\nimport axios from 'axios';\r\n//from other files\r\nimport \"../Styles/MovieListPage.css\";\r\nimport Pagination from '../Components/Pagination';\r\nimport ShowMovies from '../Components/ShowMovies';\r\n//redux\r\nimport Selector from '../Selector';\r\nimport { actions } from '../ActionCreator';\r\nimport Constants from '../Constants';\r\n\r\nconst preURL = Constants.PREURL;\r\n\r\nclass movieListPage extends React.Component {\r\n    state = {\r\n        sort: 'vote_average_desc'\r\n    }\r\n\r\n    check = (pageNumer) => {\r\n        const MovieSet = this.props.MovieSet;\r\n        const finder = (findItem) => {\r\n            return findItem.pageNumber === pageNumer;\r\n        }\r\n        if( MovieSet.findIndex(finder) >= 0 )\r\n            return true;\r\n        return false;\r\n    }\r\n\r\n    setSort = (sort) => {\r\n        this.setState({sort})\r\n    }\r\n\r\n    componentDidMount = () => {\r\n        //only if this page not exist, send ajax call\r\n        if( !this.check(this.props.Page) ) {\r\n            const url = ''.concat(preURL, this.props.Page);\r\n            axios.get(url)\r\n            .then( res => {\r\n                const resPage = res.data.page;\r\n                const resResults = res.data.results;\r\n                this.props.addOnePageMovies(resPage, resResults);\r\n            });\r\n        }\r\n    } \r\n\r\n    render() {\r\n        const Page = this.props.Page;\r\n        const finder = (findItem) => {\r\n            return findItem.pageNumber === Page;\r\n        }\r\n        const index = this.props.MovieSet.findIndex(finder);\r\n        const sort = this.state.sort;\r\n        const list = index >=0 ? this.props.MovieSet[index].onePageMovies : []\r\n        const sortedList = list\r\n          .slice(0)\r\n          .sort((a, b) => {\r\n            if (sort === 'title_asc') {\r\n                return a.title > b.title ? 1 : -1;\r\n            } else if (sort === 'title_desc') {\r\n                return a.title > b.title ? -1 : 1;\r\n            } else if (sort === 'vote_count_asc') {\r\n                return a.vote_count - b.vote_count;\r\n            } else if (sort === 'vote_count_desc') {\r\n                return b.vote_count - a.vote_count;\r\n            } else if (sort === 'vote_average_asc') {\r\n                return a.vote_average - b.vote_average;\r\n            } else if (sort === 'vote_average_desc') {\r\n                return b.vote_average - a.vote_average;\r\n            } else if (sort === 'release_date_asc') {\r\n                return new Date(a.release_date) - new Date(b.release_date);\r\n            } else if (sort === 'release_date_desc') {\r\n                return new Date(b.release_date) - new Date(a.release_date);\r\n            }\r\n        })\r\n\r\n        const movieList = sortedList.map( movie => \r\n            <ShowMovies \r\n                key={movie.id} movieData={movie} BlockedMovies={this.props.BlockedMovies}\r\n                addOneLikedMovie={this.props.addOneLikedMovie}\r\n                addOneBlockedMovie={this.props.addOneBlockedMovie}                \r\n            />\r\n        );\r\n        return (\r\n            <Fragment>\r\n                <header>Our Top Rated Movie List</header>\r\n                <div className=\"movieListPage\">\r\n                    <div className=\"sortArea\">\r\n                        <button onClick={this.setSort.bind(this, this.state.sort === 'title_asc' ? 'title_desc' : 'title_asc')}>\r\n                            Sort By Title {sort === 'title_asc' ? '⇧' : '⇩'}\r\n                        </button>\r\n                        <button onClick={this.setSort.bind(this, this.state.sort === 'vote_count_asc' ? 'vote_count_desc' : 'vote_count_asc')}>\r\n                            Sort By Vote Count {sort === 'vote_count_asc' ? '⇧' : '⇩'}\r\n                        </button>\r\n                        <button onClick={this.setSort.bind(this, this.state.sort === 'vote_average_asc' ? 'vote_average_desc' : 'vote_average_asc')}>\r\n                            Sort By Average Score {sort === 'vote_average_asc' ? '⇧' : '⇩'}\r\n                        </button>\r\n                        <button onClick={this.setSort.bind(this, this.state.sort === 'release_date_asc' ? 'release_date_desc' : 'release_date_asc')}>\r\n                            Sort By Release Date {sort === 'release_date_asc' ? '⇧' : '⇩'}\r\n                        </button>\r\n                    </div>\r\n                    <hr />\r\n                    <Pagination \r\n                        check={this.check} \r\n                        Page={this.props.Page}  \r\n                        MovieSet={this.props.MovieSet}\r\n                        changePage={this.props.changePage}\r\n                        addOnePageMovies={this.props.addOnePageMovies}\r\n                    />\r\n                    <hr />\r\n                    <div className=\"ShowMovies\">\r\n                        {movieList}\r\n                    </div>\r\n                </div>\r\n            </Fragment>\r\n        );       \r\n    }\r\n}\r\n\r\nconst mapStateToProps = (state) => ({\r\n    LikedMovies: Selector.LikedMoviesSelector(state),\r\n    BlockedMovies: Selector.BlockedMoviesSelector(state),\r\n    Page: Selector.PageSelector(state),\r\n    MovieSet: Selector.MovieSetSelector(state)\r\n});\r\n\r\nconst mapDispatchToProps = (dispatch) => ({\r\n    addOneLikedMovie: (movieData) => dispatch( actions.addOneLikedMovie(movieData) ),\r\n    addOneBlockedMovie: (movieData) => dispatch ( actions.addOneBlockedMovie(movieData) ),\r\n    deleteOneLikedMovie: (movieData) => dispatch( actions.deleteOneLikedMovie(movieData) ),\r\n    deleteOneBlockedMovie: (movieData) => dispatch( actions.deleteOneBlockedMovie(movieData) ),\r\n    changePage: (page) => dispatch( actions.changePage(page) ),\r\n    addOnePageMovies: (pageNumber, onePageMovies) => dispatch(actions.addOnePageMovies(pageNumber, onePageMovies) )\r\n});\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(movieListPage);\r\n\r\n","import { useState, useRef } from \"react\";\r\nimport React from 'react';\r\n\r\nconst imgBaseUrl = 'https://image.tmdb.org/t/p/';\r\nconst imgSize = 'w300';\r\n\r\nconst ShowLikedMovie = (props) => {\r\n    const movieData = props.movieData;\r\n    const [loading, setLoading] = useState(true);\r\n    const counter = useRef(0);\r\n    const imgLoaded = () => {\r\n        counter.current ++;\r\n        if(counter.current >= 1)\r\n            setLoading(false);\r\n    }\r\n\r\n    const handleDelete = () => {\r\n        props.deleteOneLikedMovie(movieData);\r\n    }\r\n\r\n    const handleBlock = () => {\r\n        props.addOneBlockedMovie(movieData);   \r\n    }\r\n\r\n    const imgUrl = ''.concat(imgBaseUrl, imgSize, movieData.poster_path);\r\n    return (\r\n        <div className=\"singleLikedMovie\">\r\n            <img src='./img/loading.gif' alt=\"loading img\" style={{display : loading ? \"inline\" : \"none\"}} />\r\n            <img src={imgUrl} alt={movieData.id} onLoad={imgLoaded} style={{display : loading ? \"none\" : \"inline\"}} />\r\n            <div className=\"LBoperator\">\r\n                <img src=\"./img/delete_icon.png\" alt=\"delete icon\" onClick={handleDelete}/>\r\n                <img src=\"./img/block_icon.png\" alt=\"block icon\" onClick={handleBlock}/>\r\n                <img src=\"./img/ellipsis_icon.png\" alt=\"ellipsis icon\"/>\r\n            </div>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default ShowLikedMovie;","import React, { Fragment } from 'react';\r\nimport ShowLikedMovie from '../Components/ShowLikedMovie';\r\n//redux\r\nimport { connect } from 'react-redux';\r\nimport Selector from '../Selector';\r\nimport { actions } from '../ActionCreator';\r\n\r\nclass LikedListPage extends React.Component {\r\n    render() {\r\n        const likedMovies = this.props.LikedMovies.map( movie => \r\n            <ShowLikedMovie \r\n                key={movie.id} movieData={movie} \r\n                deleteOneLikedMovie={this.props.deleteOneLikedMovie}\r\n                addOneBlockedMovie={this.props.addOneBlockedMovie}\r\n            />\r\n        );\r\n\r\n        return (\r\n            <Fragment>\r\n                <header>Movie List of Liked</header>\r\n                <div className=\"ShowLikedMovie\">\r\n                    {likedMovies}\r\n                </div>\r\n            </Fragment>\r\n        );       \r\n    }\r\n}\r\n\r\nconst mapStateToProps = (state) => ({\r\n    LikedMovies: Selector.LikedMoviesSelector(state),\r\n    BlockedMovies: Selector.BlockedMoviesSelector(state)\r\n});\r\n\r\nconst mapDispatchToProps = (dispatch) => ({\r\n    addOneLikedMovie: (movieData) => dispatch( actions.addOneLikedMovie(movieData) ),\r\n    addOneBlockedMovie: (movieData) => dispatch ( actions.addOneBlockedMovie(movieData) ),\r\n    deleteOneLikedMovie: (movieData) => dispatch( actions.deleteOneLikedMovie(movieData) ),\r\n    deleteOneBlockedMovie: (movieData) => dispatch( actions.deleteOneBlockedMovie(movieData) )\r\n});\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(LikedListPage);","import React from 'react';\r\nimport {useState, useRef} from 'react';\r\n\r\nconst imgBaseUrl = 'https://image.tmdb.org/t/p/';\r\nconst imgSize = 'w300';\r\n\r\nconst ShowBlockedMovie = (props) => {\r\n    const movieData = props.movieData;\r\n    const [loading, setLoading] = useState(true);\r\n    const counter = useRef(0);\r\n    const imgLoaded = () => {\r\n        counter.current ++;\r\n        if(counter.current >= 1)\r\n            setLoading(false);\r\n    }\r\n\r\n    const handleDelete = () => {\r\n        props.deleteOneBlockedMovie(movieData);\r\n    }\r\n\r\n    const handleLike = () => {\r\n        props.addOneLikedMovie(movieData);   \r\n    }\r\n\r\n    const imgUrl = ''.concat(imgBaseUrl, imgSize, movieData.poster_path);\r\n    return (\r\n        <div className=\"singleBlockedMovie\">\r\n            <img src='./img/loading.gif' alt=\"loading img\" style={{display : loading ? \"inline\" : \"none\"}} />\r\n            <img src={imgUrl} alt={movieData.id} onLoad={imgLoaded} style={{display : loading ? \"none\" : \"inline\"}} />\r\n            <div className=\"LBoperator\">\r\n                <img src=\"./img/delete_icon.png\" alt=\"delete icon\" onClick={handleDelete}/>\r\n                <img src=\"./img/like_icon.png\" alt=\"like icon\" onClick={handleLike}/>\r\n                <img src=\"./img/ellipsis_icon.png\" alt=\"ellipsis icon\"/>\r\n            </div>\r\n            \r\n        </div>\r\n    );\r\n}\r\n\r\nexport default ShowBlockedMovie;","import React, { Fragment } from 'react';\r\nimport ShowBlockedMovie from '../Components/ShowBlockedMovie';\r\n//redux\r\nimport { connect } from 'react-redux';\r\nimport Selector from '../Selector';\r\nimport { actions } from '../ActionCreator';\r\n\r\nclass LikedListPage extends React.Component {\r\n    render() {\r\n        const BlockedMovies = this.props.BlockedMovies.map( movie => \r\n            <ShowBlockedMovie \r\n                key={movie.id} movieData={movie}\r\n                deleteOneBlockedMovie={this.props.deleteOneBlockedMovie}\r\n                addOneLikedMovie={this.props.addOneLikedMovie}    \r\n            />\r\n        );\r\n\r\n        return (\r\n            <Fragment>\r\n                <header>Movie List of Blocked</header>\r\n                <div className=\"ShowBlockedMovie\">\r\n                    {BlockedMovies}\r\n                </div>\r\n            </Fragment>\r\n        );       \r\n    }\r\n}\r\n\r\nconst mapStateToProps = (state) => ({\r\n    LikedMovies: Selector.LikedMoviesSelector(state),\r\n    BlockedMovies: Selector.BlockedMoviesSelector(state)\r\n});\r\n\r\nconst mapDispatchToProps = (dispatch) => ({\r\n    addOneLikedMovie: (movieData) => dispatch( actions.addOneLikedMovie(movieData) ),\r\n    addOneBlockedMovie: (movieData) => dispatch ( actions.addOneBlockedMovie(movieData) ),\r\n    deleteOneLikedMovie: (movieData) => dispatch( actions.deleteOneLikedMovie(movieData) ),\r\n    deleteOneBlockedMovie: (movieData) => dispatch( actions.deleteOneBlockedMovie(movieData) )\r\n});\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(LikedListPage);","import React from 'react';\r\nimport '../Styles/App.css';\r\nimport '../Styles/Liked_Blocked_Page.css'\r\nimport SideNav from \"./sideNav\";\r\nimport HomePage from \"./homePage\";\r\nimport MovieListPage from \"./MovieListPage\";\r\nimport LikedListPage from './LikedListPage';\r\nimport BlockedListPage from './BlockedListPage';\r\n\r\nfunction App() {\r\n  const [page, setPage] = React.useState(0);\r\n  const handleClick = React.useCallback((v) => {\r\n    setPage(v);\r\n  }, []);\r\n  let currentPage = null;\r\n  if (page === 0) {\r\n    currentPage = <HomePage />;\r\n  } else if (page === 1) {\r\n    currentPage = <MovieListPage />;\r\n  } else if (page === 2) {\r\n    currentPage = <LikedListPage />;\r\n  } else if (page === 3) {\r\n    currentPage = <BlockedListPage />;\r\n  }\r\n  return (\r\n    <div className=\"App\">\r\n      <SideNav onPageChange={handleClick} />\r\n      <div className={\"main\"}>\r\n        {currentPage}\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","import Actions from '../Constants'\r\n\r\nconst initialState = {\r\n    LikedMovies: [],\r\n    BlockedMovies: [],\r\n    Page: 1,\r\n    MovieSet: []        //[ { pageNumer: , onePageMovies: }, { pageNumer: , onePageMovies: } ]\r\n};\r\n\r\nconst reducer = (state=initialState, action={}) => {\r\n    const newLikedMovies = state.LikedMovies.slice();\r\n    const newBlockedMovies = state.BlockedMovies.slice();\r\n    const newMovieSet = state.MovieSet.slice();\r\n    let newMovieData, finder;\r\n    if( action.type === Actions.ADD_ONE_LIKED_MOVIE ||\r\n            action.type === Actions.ADD_ONE_BLOCKED_MOVIE ||\r\n            action.type === Actions.DELETE_ONE_LIKED_MOVIE ||\r\n            action.type === Actions.DELETE_ONE_BLOCKED_MOVIE ) \r\n    {\r\n        newMovieData = action.movieData;\r\n        finder = (finditem) => {\r\n            return finditem.id === newMovieData.id;\r\n        };\r\n    }    \r\n\r\n    switch (action.type) {\r\n        \r\n        case Actions.ADD_ONE_LIKED_MOVIE:   \r\n            const index1 = newLikedMovies.findIndex(finder);  //find >=0, not find <0\r\n            if(index1 >= 0) {\r\n                alert(\"Like once is enough ^.^\");\r\n                return {...state};\r\n            }                \r\n            newLikedMovies.push(newMovieData);\r\n            //should also delete it from blocked list if needed !!!!!\r\n            const index1_1 = newBlockedMovies.findIndex(finder);  //find >=0, not find <0\r\n            if(index1_1 >= 0)\r\n                newBlockedMovies.splice(index1_1, 1);\r\n            return {\r\n                ...state,\r\n                LikedMovies: newLikedMovies,\r\n                BlockedMovies: newBlockedMovies\r\n            };\r\n\r\n        case Actions.ADD_ONE_BLOCKED_MOVIE: \r\n            const index2 = newBlockedMovies.findIndex(finder);  //find >=0, not find <0\r\n            if(index2 >= 0)\r\n                return {...state};\r\n            newBlockedMovies.push(newMovieData);\r\n            //should also delete it from liked list if needed !!!!!\r\n            const index2_1 = newLikedMovies.findIndex(finder);  //find >=0, not find <0\r\n            if(index2_1 >= 0)\r\n                newLikedMovies.splice(index2_1, 1);\r\n            return {\r\n                ...state,\r\n                LikedMovies: newLikedMovies,\r\n                BlockedMovies: newBlockedMovies\r\n            };  \r\n            \r\n        case Actions.DELETE_ONE_LIKED_MOVIE:\r\n            const index3 = newLikedMovies.findIndex(finder);\r\n            if(index3 >= 0)\r\n                newLikedMovies.splice(index3, 1);\r\n            else\r\n                alert(\"no this liked movie\");\r\n            return {\r\n                ...state,\r\n                LikedMovies: newLikedMovies\r\n            };\r\n\r\n        case Actions.DELETE_ONE_BLOCKED_MOVIE:            \r\n            const index4 = newBlockedMovies.findIndex(finder);\r\n            if(index4 >= 0)\r\n                newBlockedMovies.splice(index4, 1);\r\n            else\r\n                alert(\"no this blocked movie\");\r\n            return {\r\n                ...state,\r\n                BlockedMovies: newBlockedMovies\r\n            };\r\n\r\n        case Actions.CHANGE_PAGE: \r\n            const newPage = action.Page;\r\n            return {\r\n                ...state,\r\n                Page: newPage\r\n            };\r\n\r\n        case Actions.ADD_ONE_PAGE_MOVIES:\r\n            const newPageNumber = action.pageNumber;\r\n            const newOnePageMovies = action.onePageMovies;\r\n            const newMovieSetObj = {\r\n                pageNumber: newPageNumber,\r\n                onePageMovies: newOnePageMovies\r\n            };\r\n            newMovieSet.push(newMovieSetObj);\r\n            return {\r\n                ...state,\r\n                MovieSet: newMovieSet\r\n            };    \r\n        \r\n        default: \r\n            return {...state};\r\n\r\n    }\r\n};\r\n\r\nexport default reducer;","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport * as serviceWorker from './serviceWorker';\r\nimport './Styles/index.css';\r\nimport 'bootstrap/dist/css/bootstrap.css';\r\nimport \"bootstrap/dist/css/bootstrap.min.css\";\r\nimport App from './View/App';\r\nimport { createStore } from 'redux';\r\nimport { Provider } from 'react-redux';\r\nimport reducer from './Store/reducer';\r\n\r\nconst store = createStore(reducer);\r\n\r\nReactDOM.render(\r\n  <Provider store={store}>\r\n    <App />\r\n  </Provider>\r\n  ,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}